"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os

from corsheaders.defaults import default_headers

from django.conf import settings

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x*-0lh+11ue(_vz)eb2+fqh0)%2&ojy+of*4s-j=)$oej8ray#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', True)

ALLOWED_HOSTS = ['*']


# Application definition

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
THIRD_PARTY_APPS = [
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
]
LOCAL_APPS = [
    "third_parties.contribution",
    "core",
    'apps.account',
    'apps.shared',
    'apps.report',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOW_HEADERS = [
    *default_headers,
    "x-api-version",
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('DB_NAME', 'dwh'),
        'USER': os.getenv('DB_USER', 'root'),
        'PASSWORD': os.getenv('DB_PASSWORD', '123456'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '3306'),
    },
    "pacs_db": {
        'ENGINE': os.getenv('PACS_DB_ENGINE', 'django.db.backends.mysql'),
        'NAME': os.getenv('PACS_DB_NAME', 'pacsdb'),
        'USER': os.getenv('PACS_DB_USER', 'pacs'),
        'PASSWORD': os.getenv('PACS_DB_PASSWORD', '123456'),
        'HOST': os.getenv('PACS_DB_HOST', 'localhost'),
        'PORT': os.getenv('PACS_DB_PORT', '3306'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'third_parties.contribution.exception.customize_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        "rest_framework.authentication.TokenAuthentication",
    ],
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',

    ],
    'DEFAULT_PAGINATION_CLASS': 'third_parties.contribution.paginator.CustomResultsSetPagination',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ),
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',

}

LOGGING = {
    'version': 1,
    # The version number of our log
    'disable_existing_loggers': False,
    # django uses some of its own loggers for internal operations. In case you want to disable them just replace the False above with true.
    # A handler for WARNING. It is basically writing the WARNING messages into a file called WARNING.log
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'his_integration.log',
            'formatter': 'verbose'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {filename} {module} - {message}',
            'style': '{',
        },
    },    
    # A logger for WARNING which has a handler called 'file'. A logger can have multiple handler
    'loggers': {
       # notice the blank '', Usually you would put built in loggers like django or root here based on your needs
        '': {
            'handlers': ['file'], #notice how file variable is called in handler which has been defined above
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['file'],
        }        
    },
}
SWAGGER_SETTINGS = {
    'api_key': 'yourKeyGoesHere',
}
# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]
LANGUAGE_CODE = 'vi'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_L10N = True

USE_TZ = False

DATETIME_FORMAT= "%Y/%m/%d %H:%M:%S"

DATE_FORMAT = 'd/m/Y'
DATE_INPUT_FORMAT = '%Y-%m-%d'
DATE_INPUT_FORMATS = (
    '%d/%m/%Y', '%d/%m/%Y', '%d/%m/%y',  # '2006-10-25', '10/25/2006', '10/25/06'
    '%b %d %Y', '%b %d, %Y',  # 'Oct 25 2006', 'Oct 25, 2006'
    '%d %b %Y', '%d %b, %Y',  # '25 Oct 2006', '25 Oct, 2006'
    '%B %d %Y', '%B %d, %Y',  # 'October 25 2006', 'October 25, 2006'
    '%d %B %Y', '%d %B, %Y',  # '25 October 2006', '25 October, 2006'
)

DATETIME_INPUT_OUTPUT_FORMAT = '%Y-%m-%d %H:%M:%S'

DATE_INPUT_OUTPUT_FORMAT = '%Y-%m-%d'

TIME_INPUT_OUTPUT_FORMAT = '%H:%M:%S'

FILTER_DATETIME = '%Y-%m-%d %H:%M:%S'
FILTER_DATE = '%Y-%m-%d'
FILTER_TIME = '%H:%M'

DATETIME_INPUT_FORMATS = (
    '%d/%m/%Y %H:%M:%S',  # '2006-10-25 14:30:59'
    '%d/%m/%Y %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'
    '%d/%m/%Y %H:%M',  # '2006-10-25 14:30'
)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/



LOG_DIR = os.path.join(settings.BASE_DIR, 'logs')

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_URL = 'static/'
MEDIA_URL = "/media/"


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Exceptions
KEY_NOT_EXCEPTIONS = ['result', 'status', 'results', 'error_data']
KEY_NOT_CONVERT_EXCEPTIONS = ['id_list']
DOCUMENT_EXCEPTION = ['wbs_project', 'wbs_plan']

DJANGO_SETTINGS_MODULE = 'config.settings'
AUTH_USER_MODEL = 'account.User'


CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
SHOW_API_DOC = True

# TIME ACCESS TOKEN, REFRESH TOKEN EXPIRED
REFRESH_TOKEN_LIFETIME = 7
ACCESS_TOKEN_LIFETIME = 1


from config.others.settings import *


try:
    from .swagger import *
except Exception as e:
    print(e)


try:
    from .others import *
except Exception as e:
    print(e)
